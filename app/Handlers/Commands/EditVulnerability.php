<?php

namespace App\Handlers\Commands;

use App\Commands\EditVulnerability as EditVulnerabilityCommand;
use App\Entities\Vulnerability;
use App\Exceptions\ActionNotPermittedException;
use App\Exceptions\InvalidInputException;
use App\Exceptions\UserNotFoundException;
use App\Exceptions\VulnerabilityNotFoundException;
use App\Exceptions\WorkspaceNotFoundException;
use App\Policies\ComponentPolicy;
use App\Repositories\AssetRepository;
use App\Repositories\VulnerabilityRepository;
use App\Repositories\WorkspaceAppRepository;
use App\Services\ImageService;
use Doctrine\ORM\EntityManager;
use Exception;

class EditVulnerability extends AbstractVulnerabilityHandler
{
    /**
     * EditVulnerability constructor.
     *
     * @param AssetRepository $assetRepository
     * @param VulnerabilityRepository $vulnerabilityRepository
     * @param WorkspaceAppRepository $workspaceAppRepository
     * @param EntityManager $em
     * @param ImageService $service
     */
    public function __construct(
        AssetRepository $assetRepository, VulnerabilityRepository $vulnerabilityRepository,
        WorkspaceAppRepository $workspaceAppRepository, EntityManager $em, ImageService $service
    )
    {
        parent::__construct($assetRepository, $vulnerabilityRepository, $workspaceAppRepository, $em, $service);
    }

    /**
     * Process the EditVulnerability command.
     *
     * @param EditVulnerabilityCommand $command
     * @return Vulnerability
     * @throws InvalidInputException
     * @throws UserNotFoundException
     * @throws WorkspaceNotFoundException
     * @throws Exception
     */
    public function handle(EditVulnerabilityCommand $command)
    {
        // Get the authenticated User
        $requestingUser = $this->authenticate();

        $vulnerabilityId      = $command->getId();
        $assetIds             = $command->getAssetIds();
        $vulnerabilityDetails = $command->getRequestedChanges();
        // Check that all the required fields were set on the command
        if (!isset($vulnerabilityId, $assetIds, $vulnerabilityDetails)) {
            throw new InvalidInputException("One or more required members are not set on the command");
        }

        /** @var Vulnerability $vulnerability */
        $vulnerability = $this->vulnerabilityRepository->find($vulnerabilityId);
        // Make sure the WorkspaceApp exists
        if (empty($vulnerability)) {
            throw new VulnerabilityNotFoundException(
                "A Vulnerability with the given ID does not exist."
            );
        }

        // Make sure we are editing a Vulnerability on a Ruggedy ScannerApp. Currently this is the only place where
        // editing Vulnerabilities is enabled
        if (!$vulnerability->getFile()->getWorkspaceApp()->isRuggedyApp()) {
            throw new ActionNotPermittedException(
                "Cannot edit Vulnerabilities on any WorkspaceApp other than the Ruggedy WorkspaceApp"
            );
        }

        // Make sure the User has permission to edit a Vulnerability on a WorkspaceApp
        if ($requestingUser->cannot(ComponentPolicy::ACTION_UPDATE, $vulnerability)) {
            throw new ActionNotPermittedException(
                "The requesting User does not have permission to edit Vulnerabilities"
            );
        }

        // Populate the Vulnerability with data from the request
        $vulnerability->setFromArray($vulnerabilityDetails);

        $this->doVulnerabilityPostProcessing($vulnerability, $assetIds);

        // Save all changes to the DB and refresh the Vulnerability with the changes
        $this->em->flush();
        $this->em->refresh($vulnerability);

        return $vulnerability;
    }
}