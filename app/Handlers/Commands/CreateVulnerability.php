<?php

namespace App\Handlers\Commands;

use App\Commands\CreateVulnerability as CreateVulnerabilityCommand;
use App\Entities\Asset;
use App\Entities\File;
use App\Entities\ScannerApp;
use App\Entities\Vulnerability;
use App\Exceptions\ActionNotPermittedException;
use App\Exceptions\FileNotFoundException;
use App\Exceptions\InvalidInputException;
use App\Exceptions\UserNotFoundException;
use App\Exceptions\WorkspaceNotFoundException;
use App\Policies\ComponentPolicy;
use App\Repositories\AssetRepository;
use App\Repositories\FileRepository;
use App\Repositories\VulnerabilityRepository;
use Doctrine\ORM\EntityManager;
use Exception;
use Illuminate\Http\UploadedFile;
use Symfony\Component\Filesystem\Filesystem;
use Symfony\Component\HttpFoundation\File\Exception\FileException;

class CreateVulnerability extends CommandHandler
{
    /** @var AssetRepository */
    protected $assetRepository;

    /** @var VulnerabilityRepository */
    protected $vulnerabilityRepository;

    /** @var FileRepository */
    protected $fileRepository;

    /** @var EntityManager */
    protected $em;

    /** @var Filesystem */
    protected $fileSystem;

    /**
     * CreateAsset constructor.
     *
     * @param AssetRepository $assetRepository
     * @param VulnerabilityRepository $vulnerabilityRepository
     * @param FileRepository $fileRepository
     * @param EntityManager $em
     * @param Filesystem $fileSystem
     */
    public function __construct(
        AssetRepository $assetRepository, VulnerabilityRepository $vulnerabilityRepository,
        FileRepository $fileRepository, EntityManager $em, Filesystem $fileSystem
    )
    {
        $this->assetRepository         = $assetRepository;
        $this->vulnerabilityRepository = $vulnerabilityRepository;
        $this->fileRepository          = $fileRepository;
        $this->em                      = $em;
        $this->fileSystem              = $fileSystem;
    }

    /**
     * Process the CreateAsset command.
     *
     * @param CreateVulnerabilityCommand $command
     * @return Vulnerability
     * @throws InvalidInputException
     * @throws UserNotFoundException
     * @throws WorkspaceNotFoundException
     * @throws Exception
     */
    public function handle(CreateVulnerabilityCommand $command)
    {
        // Get the authenticated User
        $requestingUser = $this->authenticate();

        /** @var Vulnerability $vulnerability */
        $fileId = $command->getId();
        $assetIds       = $command->getAssetIds();
        $vulnerability  = $command->getEntity();
        // Check that all the required fields were set on the command
        if (!isset($fileId, $assetIds, $vulnerability)) {
            throw new InvalidInputException("One or more required members are not set on the command");
        }

        /** @var File $file */
        $file = $this->fileRepository->find($fileId);
        // Make sure the WorkspaceApp exists
        if (empty($file)) {
            throw new FileNotFoundException(
                "A File with the given ID does not exist."
            );
        }

        // Make sure we are creating a Vulnerability on a Ruggedy ScannerApp. Currently this is the only place where
        // creating custom Vulnerabilities is enabled
        if ($file->getWorkspaceApp()->getScannerApp()->getName() !== ScannerApp::SCANNER_RUGGEDY) {
            throw new ActionNotPermittedException(
                "Cannot create Vulnerabilities on any WorkspaceApp other than the Ruggedy WorkspaceApp"
            );
        }

        // Make sure the User has permission to create a Vulnerability
        if ($requestingUser->cannot(ComponentPolicy::ACTION_UPDATE, $file)) {
            throw new ActionNotPermittedException(
                "The requesting User does not have permission to create new Vulnerabilities"
            );
        }

        // Store the thumbnails and save the stored paths in the Vulnerability
        $this->storeThumbnails($vulnerability);

        // Get all related Assets if given
        $assets = $this->assetRepository->findBy([Asset::ID => $assetIds]);

        // Associate the Vulnerability with the relevant WorkspaceApp
        $file->addVulnerability($vulnerability);

        // Persist the new Vulnerability to the database via the WorkspaceApp (cascade persist is enabled)
        $this->em->persist($file);

        // Add the Vulnerability to all the relevant Assets and persist them
        if (!empty($assets)) {
            collect($assets)->filter(function ($asset) use ($requestingUser) {
                /** @var Asset $asset */
                return !$asset->getSuppressed() && !$asset->getDeleted()
                    && $requestingUser->can(ComponentPolicy::ACTION_UPDATE, $asset);
            })->each(function ($asset) use ($vulnerability) {
                /** @var Asset $asset */
                $asset->addVulnerability($vulnerability);
                $this->em->persist($asset);
            });
        }

        // Save immediately if we're not in multi-mode
        if (!$command->isMultiMode()) {
            $this->em->flush();
        }

        // Refresh and return the Vulnerability
        $this->em->refresh($vulnerability);
        return $vulnerability;
    }

    /**
     * Store any valid thumbnails
     *
     * @param Vulnerability $vulnerability
     */
    protected function storeThumbnails(Vulnerability $vulnerability)
    {
        if (!$this->fileSystem->exists(Vulnerability::getThumbnailStoragePath())) {
            $this->fileSystem->mkdir(Vulnerability::getThumbnailStoragePath(), 0755);
        }

        collect([
            'setThumbnail1' => $vulnerability->getThumbnail1(),
            'setThumbnail2' => $vulnerability->getThumbnail2(),
            'setThumbnail3' => $vulnerability->getThumbnail3(),
        ])->filter(function ($thumbnail) {
            return !empty($thumbnail) && $thumbnail instanceof UploadedFile
                && Vulnerability::isAcceptedThumbnailExtension($thumbnail->getClientOriginalExtension());
        })->each(function ($thumbnail, $setter) use ($vulnerability) {
            /** @var UploadedFile $thumbnail */
            try {
                $file = $thumbnail->move(
                    Vulnerability::getThumbnailStoragePath(),
                     date("YmdHis") . '_' . md5($thumbnail->getClientOriginalName() . microtime()) . '.'
                        . $thumbnail->getClientOriginalExtension()
                );
            } catch (FileException $e) {
                return;
            }

            $vulnerability->$setter($file->getRealPath());
        });
    }
}