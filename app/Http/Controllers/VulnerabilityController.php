<?php

namespace App\Http\Controllers;

use App\Commands\CreateVulnerability;
use App\Commands\GetVulnerability;
use App\Commands\GetWorkspaceApp;
use App\Entities\Asset;
use App\Entities\Folder;
use App\Entities\Vulnerability;
use Doctrine\Common\Collections\Collection;

/**
 * @Middleware("web")
 */
class VulnerabilityController extends AbstractController
{
    /**
     * Get a single Vulnerability record related to a specific file
     *
     * @GET("/vulnerability/{vulnerabilityID}", as="vulnerability.view", where={"vulnerabilityId":"[0-9]+"})
     *
     * @param $vulnerabilityId
     * @return \Illuminate\Contracts\View\Factory|\Illuminate\View\View
     */
    public function appShowRecord($vulnerabilityId)
    {
        $command       = new GetVulnerability(intval($vulnerabilityId));
        $vulnerability = $this->sendCommandToBusHelper($command);

        if ($this->isCommandError($vulnerability)) {
            return redirect()->back();
        }

        return view('workspaces.appShowRecord', [
            'vulnerability' => $vulnerability,
            'folders'       => $this->getFoldersForSelect(
                $vulnerability->getFile()->getWorkspaceApp()->getWorkspace()->getFolders()
            ),
            'assets'        => $vulnerability->getAssets(),
            'comments'      => $vulnerability->getComments(),
        ]);
    }

    /**
     * Show the form to create a new custom Vulnerability in the Ruggedy App
     *
     * @GET("/workspace/ruggedy-app/create/{workspaceAppId}", as="vulnerability.create",
     *     where={"workspaceAppId":"[0-9]+"})
     *
     * @param $workspaceAppId
     * @return \Illuminate\Contracts\View\Factory|\Illuminate\Http\RedirectResponse|\Illuminate\View\View
     */
    public function ruggedyCreateVulnerability($workspaceAppId) {
        $command = new GetWorkspaceApp(intval($workspaceAppId));
        $workspaceApp = $this->sendCommandToBusHelper($command);

        if ($this->isCommandError($workspaceApp)) {
            return redirect()->back();
        }

        // An array of severities for the Vulnerability severity select input
        $severities = Vulnerability::getSeverityTextToScoreMap()->map(function($score) {
            return intval($score);
        })->flip()->prepend("-- Select a Severity --", "")->toArray();

        // An array of valid Asset OS vendors for the select input
        $vendors = Asset::getValidOsVendors()->reduce(function ($vendors, $vendor) {
            /** @var \Illuminate\Support\Collection $vendors */
            return $vendors->put($vendor, $vendor);
        }, collect([]))->prepend("-- Select a Vendor --", "")->toArray();

        return view('workspaces.ruggedy-create', [
            'workspaceApp' => $workspaceApp,
            'file'         => $workspaceApp->getFiles()->first(),
            'severities'   => $severities,
            'vendors'      => $vendors,
        ]);
    }

    /**
     * Store a new custom Vulnerability for the Ruggedy App
     *
     * @POST("/workspace/ruggedy-app/store/{fileId}", as="vulnerability.store",
     *     where={"fileId":"[0-9]+"})
     *
     * @param $fileId
     * @return \Illuminate\Contracts\View\Factory|\Illuminate\Http\RedirectResponse|\Illuminate\View\View
     */
    public function ruggedyStoreVulnerability($fileId)
    {
        // Validate the form submission
        $this->validate($this->request, $this->getValidationRules(), $this->getValidationRules());

        // Create a new Vulnerability and populate from the request
        $vulnerability = new Vulnerability();
        $vulnerability->setName($this->request->get('name'))
            ->setDescription($this->request->get('description'))
            ->setSolution($this->request->get('solution'))
            ->setPoc($this->request->get('poc'))
            ->setSeverity($this->request->get('severity'))
            ->setCvssScore($this->request->get('cvss_score'))
            ->setThumbnail1($this->request->file('thumbnail_1'))
            ->setThumbnail2($this->request->file('thumbnail_2'))
            ->setThumbnail3($this->request->file('thumbnail_3'));

        $command = new CreateVulnerability(intval($fileId), $vulnerability, $this->request->get('assets', []));
        $vulnerability = $this->sendCommandToBusHelper($command);
        if ($this->isCommandError($vulnerability)) {
            return redirect()->back()->withInput();
        }

        $this->flashMessenger->success("A new custom Vulnerability has been created in your Ruggedy App.");
        return redirect()->route('ruggedy-app.view', [
            $vulnerability->getFile()->getRouteParameterName() => $vulnerability->getFile()->getId()
        ]);

    }

    /**
     * Convert an ArrayCollection of Folder entities into an array of Folder names indexed by the Folder ID
     *
     * @param Collection $folders
     * @return array
     */
    protected function getFoldersForSelect(Collection $folders): array
    {
        return collect($folders->toArray())->reduce(function ($foldersForSelect, $folder) {
            /** @var Folder $folder */
            $foldersForSelect[$folder->getId()] = $folder->getName();
            return $foldersForSelect;
        }, []);
    }

    /**
     * @inheritdoc
     *
     * @return array
     */
    protected function getValidationRules(): array
    {
        return [
            'name'       => 'bail|required',
            'severity'   => 'bail|nullable|in:0,3,6,9,10',
            'cvss_score' => 'bail|nullable|numeric|between:0,10',
        ];
    }

    /**
     * @inheritdoc
     *
     * @return array
     */
    protected function getValidationMessages(): array
    {
        return [
            'name.required' => 'A Vulnerability name is required but it does not seem like you entered one. '
                .'Please try again.',
            'severity.in'   => 'Please select a valid risk score (severity).',
            'cvss_score'    => [
                'numeric' => 'CVSS score must be a number and it does not seem like you entered a number. '
                    .'Please try again',
                'between' => 'CVSS score must be a number between 0 and 10 and it seems like you entered a number '
                    .'outside of that range. Please try again.',
            ],
        ];
    }
}