<?php

namespace App\Entities;

use App\Contracts\GeneratesUniqueHash;
use App\Contracts\HasIdColumn;
use App\Contracts\RelatesToFiles;
use App\Entities\Base\AbstractEntity;
use Carbon\Carbon;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\ORM\Mapping as ORM;
use Illuminate\Support\Collection;

/**
 * App\Entities\Vulnerability
 *
 * @ORM\Entity(repositoryClass="App\Repositories\VulnerabilityRepository")
 * @ORM\HasLifecycleCallbacks
 */
class Vulnerability extends Base\Vulnerability implements HasIdColumn, RelatesToFiles, GeneratesUniqueHash
{
    const FILES    = 'files';
    const ASSETS   = 'assets';
    const EXPLOITS = 'exploits';

    /**
     * @ORM\ManyToMany(targetEntity="File", mappedBy="vulnerabilities", indexBy="id")
     */
    protected $files;

    /**
     * @ORM\ManyToMany(targetEntity="Asset", mappedBy="vulnerabilities")
     */
    protected $assets;

    /**
     * @ORM\ManyToMany(targetEntity="Exploit", inversedBy="vulnerabilities", indexBy="title", cascade={"persist"})
     * @ORM\JoinTable(name="vulnerabilities_exploits")
     */
    protected $exploits;

    /**
     * Vulnerability constructor.
     */
    public function __construct()
    {
        parent::__construct();
        $this->files    = new ArrayCollection();
        $this->assets   = new ArrayCollection();
        $this->exploits = new ArrayCollection();
    }

    /**
     * Override the parent method to set the $malwareAvailable property at the same time
     *
     * @param string $malware_description
     * @return Base\Vulnerability
     */
    public function setMalwareDescription($malware_description)
    {
        $this->setMalwareAvailable(!empty($malware_description));
        return parent::setMalwareDescription($malware_description);
    }

    /**
     * Override parent method to format the date when an invalid date format is encountered
     *
     * @param \DateTime $published_date_from_scanner
     * @return Base\Vulnerability
     */
    public function setPublishedDateFromScanner($published_date_from_scanner)
    {
        if (empty($this->sanitiseDate($published_date_from_scanner))) {
            return $this;
        }

        return parent::setPublishedDateFromScanner(
            $this->sanitiseDate($published_date_from_scanner)
        );
    }

    /**
     * Override parent method to format the date when an invalid date format is encountered
     *
     * @param \DateTime $modified_date_from_scanner
     * @return Base\Vulnerability
     */
    public function setModifiedDateFromScanner($modified_date_from_scanner)
    {
        if (empty($this->sanitiseDate($modified_date_from_scanner))) {
            return $this;
        }

        return parent::setModifiedDateFromScanner(
            $this->sanitiseDate($modified_date_from_scanner)
        );
    }

    /**
     * Override the parent method to set the inverse relation on the VulnerabilityReferenceCode
     *
     * @param Base\VulnerabilityReferenceCode $vulnerabilityReferenceCode
     * @return Base\Vulnerability
     */
    public function addVulnerabilityReferenceCode(Base\VulnerabilityReferenceCode $vulnerabilityReferenceCode)
    {
        $vulnerabilityReferenceCode->setVulnerability($this);
        return parent::addVulnerabilityReferenceCode($vulnerabilityReferenceCode);
    }

    /**
     * @param Exploit $exploit
     * @return $this
     */
    public function addExploit(Exploit $exploit)
    {
        $this->exploits[$exploit->getTitle()] = $exploit;

        return $this;
    }

    /**
     * @param string $title
     * @return Exploit|null
     */
    public function getExploit(string $title)
    {
        if (!isset($this->exploits[$title])) {
            return null;
        }

        return $this->exploits[$title];
    }

    /**
     * @param Exploit $exploit
     * @return $this
     */
    public function removeExploit(Exploit $exploit)
    {
        $this->exploits->removeElement($exploit);

        return $this;
    }

    /**
     * Sanitise an incoming date string
     *
     * @param $dateString
     * @return Carbon|null
     */
    protected function sanitiseDate($dateString)
    {
        if ($dateString instanceof Carbon) {
            return $dateString;
        }

        $dateString = new Carbon(
            substr($dateString, 0, 15)
        );

        if (!($dateString instanceof Carbon)) {
            return null;
        }

        return $dateString;
    }

    /**
     * Get a hash value of all the property values whose combination creates a unique key
     *
     * @return string
     */
    public function getHash(): string
    {
        return AbstractEntity::generateUniqueHash($this->getUniqueKeyColumns());
    }

    /**
     * @return Collection
     */
    public function getUniqueKeyColumns(): Collection
    {
        return new Collection([
            parent::ID_FROM_SCANNER => $this->id_from_scanner,
            parent::NAME            => $this->name,
            parent::DESCRIPTION     => $this->description,
        ]);
    }

    /**
     * @param File $file
     * @return $this
     */
    public function addFile(File $file)
    {
        $this->files[$file->getId()] = $file;

        return $this;
    }

    /**
     * @param File $file
     * @return $this
     */
    public function removeFile(File $file)
    {
        $this->files->removeElement($file);

        return $this;
    }

    /**
     * @param Asset $asset
     * @return $this
     */
    public function addAsset(Asset $asset)
    {
        $this->assets[] = $asset;

        return $this;
    }

    /**
     * @param Asset $asset
     * @return $this
     */
    public function removeAsset(Asset $asset)
    {
        $this->assets->removeElement($asset);

        return $this;
    }
}