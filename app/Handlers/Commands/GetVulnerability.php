<?php

namespace App\Handlers\Commands;

use App\Commands\GetVulnerability as GetVulnerabilityCommand;
use App\Entities\Asset;
use App\Entities\Comment;
use App\Entities\Vulnerability;
use App\Exceptions\InvalidInputException;
use App\Exceptions\VulnerabilityNotFoundException;
use App\Repositories\VulnerabilityRepository;

class GetVulnerability extends CommandHandler
{
    /** @var VulnerabilityRepository */
    protected $repository;

    /**
     * GetVulnerability constructor.
     *
     * @param VulnerabilityRepository $vulnerabilityRepository
     */
    public function __construct(VulnerabilityRepository $vulnerabilityRepository)
    {
        $this->repository = $vulnerabilityRepository;
    }

    /**
     * Process the GetVulnerability command.
     *
     * @param GetVulnerabilityCommand $command
     * @return null|object
     * @throws InvalidInputException
     * @throws VulnerabilityNotFoundException
     */
    public function handle(GetVulnerabilityCommand $command)
    {
        $id     = $command->getId();
        $fileId = $command->getFileId();
        if (!isset($id, $fileId)) {
            throw new InvalidInputException("One or more required members are not set on the command");
        }

        /** @var Vulnerability $vulnerability */
        $vulnerability = $this->repository->find($id);
        if (empty($vulnerability)) {
            throw new VulnerabilityNotFoundException("There is no existing Vulnerability with the given ID");
        }

        // Filter out Assets not related to the instance of this Vulnerability found in this File
        $vulnerability->getAssets()->forAll(function ($_, $asset) use ($vulnerability, $fileId) {
            /** @var Asset $asset */
            if ($asset->getFileId() === $fileId) {
                return true;
            }

            $vulnerability->removeAsset($asset);
            return true;
        });

        // Filter out Comments not related to the instance of this Vulnerability found in this File
        $vulnerability->getComments()->forAll(function ($_, $comment) use ($vulnerability, $fileId) {
            /** @var Comment $comment */
            if ($comment->getFileId() === $fileId) {
                return true;
            }

            $vulnerability->removeComment($comment);
            return true;
        });


        return $vulnerability;
    }
}