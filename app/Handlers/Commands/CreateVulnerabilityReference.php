<?php

namespace App\Handlers\Commands;

use App\Commands\CreateVulnerabilityReference as CreateVulnerabilityReferenceCommand;
use App\Entities\VulnerabilityReferenceCode;
use App\Entities\Vulnerability;
use App\Exceptions\ActionNotPermittedException;
use App\Exceptions\InvalidInputException;
use App\Exceptions\UserNotFoundException;
use App\Exceptions\VulnerabilityNotFoundException;
use App\Exceptions\WorkspaceNotFoundException;
use App\Policies\ComponentPolicy;
use App\Repositories\VulnerabilityReferenceCodeRepository;
use App\Repositories\VulnerabilityRepository;
use Doctrine\ORM\EntityManager;
use Exception;

class CreateVulnerabilityReference extends CommandHandler
{
    /** @var VulnerabilityRepository */
    protected $vulnerabilityRepository;

    /** @var VulnerabilityReferenceCodeRepository */
    protected $vulnerabilityRefRepository;

    /** @var EntityManager */
    protected $em;

    /**
     * CreateAsset constructor.
     *
     * @param VulnerabilityRepository $assetRepository
     * @param VulnerabilityReferenceCodeRepository $vulnerabilityReferenceCodeRepository
     * @param EntityManager $em
     */
    public function __construct(
        VulnerabilityRepository $assetRepository,
        VulnerabilityReferenceCodeRepository $vulnerabilityReferenceCodeRepository, EntityManager $em
    )
    {
        $this->vulnerabilityRepository    = $assetRepository;
        $this->vulnerabilityRefRepository = $vulnerabilityReferenceCodeRepository;
        $this->em                         = $em;
    }

    /**
     * Process the CreateAsset command.
     *
     * @param CreateVulnerabilityReferenceCommand $command
     * @return VulnerabilityReferenceCode
     * @throws InvalidInputException
     * @throws UserNotFoundException
     * @throws WorkspaceNotFoundException
     * @throws Exception
     */
    public function handle(CreateVulnerabilityReferenceCommand $command)
    {
        // Get the authenticated User
        $requestingUser = $this->authenticate();
        
        // Check that all the required fields were set on the command
        $vulnerabilityId = $command->getId();
        $details         = $command->getDetails();
        
        if (!isset($vulnerabilityId, $details)) {
            throw new InvalidInputException("One or more required members are not set on the command");
        }

        // Make sure the given Workspace exists
        /** @var Vulnerability $asset */
        $vulnerability = $this->getVulnerabilityRepository()->find($vulnerabilityId);
        if (empty($vulnerability)) {
            throw new VulnerabilityNotFoundException("No Asset with the given ID was found in the database");
        }

        // Make sure the authenticated User has permission to add an Asset to this Workspace
        if ($requestingUser->cannot(ComponentPolicy::ACTION_UPDATE, $vulnerability)) {
            throw new ActionNotPermittedException(
                "The authenticated User does not have permission to"
                . " add a Vulnerability Reference to the given Vulnerability"
            );
        }

        // Check if this Vulnerability reference already exists for this Vulnerability and if so, exit early
        $details[VulnerabilityReferenceCode::VULNERABILITY_ID] = $vulnerabilityId;
        $vulnerabilityReference = $this->getVulnerabilityRefRepository()->findOneBy($details);
        if (!empty($vulnerabilityReference) && $vulnerabilityReference instanceof VulnerabilityReferenceCode) {
            return $vulnerabilityReference;
        }

        $vulnerabilityReference = new VulnerabilityReferenceCode();
        $vulnerabilityReference->setFromArray($details);
        $vulnerabilityReference->setVulnerability($vulnerability);

        // Persist the new Asset to the database
        $this->getEm()->persist($vulnerabilityReference);

        // Save immediately if we're not in multi-mode
        if (!$command->isMultiMode()) {
            $this->getEm()->flush($vulnerabilityReference);
        }

        return $vulnerabilityReference;
    }

    /**
     * @return VulnerabilityRepository
     */
    public function getVulnerabilityRepository()
    {
        return $this->vulnerabilityRepository;
    }

    /**
     * @return VulnerabilityReferenceCodeRepository
     */
    public function getVulnerabilityRefRepository(): VulnerabilityReferenceCodeRepository
    {
        return $this->vulnerabilityRefRepository;
    }

    /**
     * @return EntityManager
     */
    public function getEm()
    {
        return $this->em;
    }
}