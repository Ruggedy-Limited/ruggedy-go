<?php

namespace App\Handlers\Commands;

use App\Commands\EditVulnerability as EditVulnerabilityCommand;
use App\Entities\Asset;
use App\Entities\ScannerApp;
use App\Entities\Vulnerability;
use App\Exceptions\ActionNotPermittedException;
use App\Exceptions\AssetNotFoundException;
use App\Exceptions\InvalidInputException;
use App\Exceptions\UserNotFoundException;
use App\Exceptions\VulnerabilityNotFoundException;
use App\Exceptions\WorkspaceNotFoundException;
use App\Policies\ComponentPolicy;
use App\Repositories\AssetRepository;
use App\Repositories\VulnerabilityRepository;
use App\Repositories\WorkspaceAppRepository;
use Doctrine\ORM\EntityManager;
use Exception;

class EditVulnerability extends CommandHandler
{
    /** @var AssetRepository */
    protected $assetRepository;

    /** @var VulnerabilityRepository */
    protected $vulnerabilityRepository;

    /** @var WorkspaceAppRepository */
    protected $workspaceAppRepository;

    /** @var EntityManager */
    protected $em;

    /**
     * EditVulnerability constructor.
     *
     * @param AssetRepository $assetRepository
     * @param VulnerabilityRepository $vulnerabilityRepository
     * @param WorkspaceAppRepository $workspaceAppRepository
     * @param EntityManager $em
     */
    public function __construct(
        AssetRepository $assetRepository, VulnerabilityRepository $vulnerabilityRepository,
        WorkspaceAppRepository $workspaceAppRepository, EntityManager $em
    )
    {
        $this->assetRepository         = $assetRepository;
        $this->vulnerabilityRepository = $vulnerabilityRepository;
        $this->workspaceAppRepository  = $workspaceAppRepository;
        $this->em                      = $em;
    }

    /**
     * Process the EditVulnerability command.
     *
     * @param EditVulnerabilityCommand $command
     * @return Vulnerability
     * @throws InvalidInputException
     * @throws UserNotFoundException
     * @throws WorkspaceNotFoundException
     * @throws Exception
     */
    public function handle(EditVulnerabilityCommand $command)
    {
        // Get the authenticated User
        $requestingUser = $this->authenticate();

        $vulnerabilityId      = $command->getId();
        $assetIds             = $command->getAssetIds();
        $vulnerabilityDetails = $command->getRequestedChanges();
        // Check that all the required fields were set on the command
        if (!isset($vulnerabilityId, $assetIds, $vulnerabilityDetails)) {
            throw new InvalidInputException("One or more required members are not set on the command");
        }

        /** @var Vulnerability $vulnerability */
        $vulnerability = $this->vulnerabilityRepository->find($vulnerabilityId);
        // Make sure the WorkspaceApp exists
        if (empty($vulnerability)) {
            throw new VulnerabilityNotFoundException(
                "A Vulnerability with the given ID does not exist."
            );
        }

        // Make sure we are editing a Vulnerability on a Ruggedy ScannerApp. Currently this is the only place where
        // editing Vulnerabilities is enabled
        if ($vulnerability->getWorkspaceApp()->getScannerApp()->getName() !== ScannerApp::SCANNER_RUGGEDY) {
            throw new ActionNotPermittedException(
                "Cannot edit Vulnerabilities on any WorkspaceApp other than the Ruggedy WorkspaceApp"
            );
        }

        // Make sure the User has permission to edit a Vulnerability on a WorkspaceApp
        if ($requestingUser->cannot(ComponentPolicy::ACTION_UPDATE, $vulnerability->getWorkspaceApp())) {
            throw new ActionNotPermittedException(
                "The requesting User does not have permission to edit Vulnerabilities"
            );
        }

        // Make sure the given Asset(s) exist
        $assets = $this->assetRepository->findBy([Asset::ID => $assetIds]);
        if (empty($assets)) {
            throw new AssetNotFoundException("No Asset with any of the given IDs was found in the database");
        }

        $vulnerability->setFromArray($vulnerabilityDetails);
        // Persist the new Asset to the database
        $this->em->persist($vulnerability);

        // Add the Vulnerability to all the relevant Assets
        collect($assets)->filter(function ($asset) use ($requestingUser) {
            /** @var Asset $asset */
            return !$asset->getSuppressed() && !$asset->getDeleted()
                && $requestingUser->can(ComponentPolicy::ACTION_UPDATE, $asset);
        })->each(function ($asset) use ($vulnerability) {
            /** @var Asset $asset */
            $asset->addVulnerability($vulnerability);
            $this->em->persist($asset);
        });


        $this->em->flush();
        $this->em->refresh($vulnerability);

        return $vulnerability;
    }
}