<?php

namespace App\Handlers\Commands;

use App\Commands\CreateVulnerability as CreateVulnerabilityCommand;
use App\Entities\Asset;
use App\Entities\Vulnerability;
use App\Entities\WorkspaceApp;
use App\Exceptions\AssetNotFoundException;
use App\Exceptions\InvalidInputException;
use App\Exceptions\UserNotFoundException;
use App\Exceptions\WorkspaceAppNotFoundException;
use App\Exceptions\WorkspaceNotFoundException;
use App\Policies\ComponentPolicy;
use App\Repositories\AssetRepository;
use App\Repositories\VulnerabilityRepository;
use App\Repositories\WorkspaceAppRepository;
use Doctrine\Common\Collections\Collection;
use Doctrine\ORM\EntityManager;
use Exception;

class CreateVulnerability extends CommandHandler
{
    /** @var AssetRepository */
    protected $assetRepository;

    /** @var VulnerabilityRepository */
    protected $vulnerabilityRepository;

    /** @var WorkspaceAppRepository */
    protected $workspaceAppRepository;

    /** @var EntityManager */
    protected $em;

    /**
     * CreateAsset constructor.
     *
     * @param AssetRepository $assetRepository
     * @param VulnerabilityRepository $vulnerabilityRepository
     * @param WorkspaceAppRepository $workspaceAppRepository
     * @param EntityManager $em
     */
    public function __construct(
        AssetRepository $assetRepository, VulnerabilityRepository $vulnerabilityRepository,
        WorkspaceAppRepository $workspaceAppRepository, EntityManager $em
    )
    {
        $this->assetRepository         = $assetRepository;
        $this->vulnerabilityRepository = $vulnerabilityRepository;
        $this->workspaceAppRepository  = $workspaceAppRepository;
        $this->em                      = $em;
    }

    /**
     * Process the CreateAsset command.
     *
     * @param CreateVulnerabilityCommand $command
     * @return Vulnerability
     * @throws InvalidInputException
     * @throws UserNotFoundException
     * @throws WorkspaceNotFoundException
     * @throws Exception
     */
    public function handle(CreateVulnerabilityCommand $command)
    {
        // Get the authenticated User
        $requestingUser = $this->authenticate();

        $workspaceAppId = $command->getId();
        $assetIds       = $command->getAssetIds();
        /** @var Vulnerability $vulnerability */
        $vulnerability = $command->getEntity();
        // Check that all the required fields were set on the command
        if (!isset($workspaceAppId, $assetIds, $vulnerability)) {
            throw new InvalidInputException("One or more required members are not set on the command");
        }

        /** @var WorkspaceApp $workspaceApp */
        $workspaceApp = $this->workspaceAppRepository->find($workspaceAppId);
        // Make sure the WorkspaceApp exists
        if (empty($workspaceApp)) {
            throw new WorkspaceAppNotFoundException(
                "A WorkspaceApp with the given ID does not exist."
            );
        }

        // Make sure the given Asset exists
        $assets = $this->assetRepository->findBy([Asset::ID => $assetIds]);
        if (empty($assets)) {
            throw new AssetNotFoundException("No Asset with any of the given IDs was found in the database");
        }

        $workspaceApp->addVulnerability($vulnerability);

        // Persist the new Asset to the database
        $this->em->persist($workspaceApp);
        $this->em->persist($vulnerability);

        // Add the Vulnerability to all the relevant Assets
        collect($assets)->filter(function ($asset) use ($requestingUser) {
            /** @var Asset $asset */
            return !$asset->getSuppressed() && !$asset->getDeleted()
                && $requestingUser->can(ComponentPolicy::ACTION_UPDATE, $asset);
        })->each(function ($asset) use ($vulnerability) {
            /** @var Asset $asset */
            $asset->addVulnerability($vulnerability);
            $this->em->persist($asset);
        });

        // Save immediately if we're not in multi-mode
        if (!$command->isMultiMode()) {
            $this->em->flush();
        }

        $this->em->refresh($vulnerability);

        return $vulnerability;
    }
}