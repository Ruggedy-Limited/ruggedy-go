<?php

namespace App\Entities;

use App\Contracts\HasIdColumn;
use App\Contracts\RelatesToFiles;
use Carbon\Carbon;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\ORM\Mapping as ORM;
use Illuminate\Support\Collection;

/**
 * App\Entities\Vulnerability
 *
 * @ORM\Entity(repositoryClass="App\Repositories\VulnerabilityRepository")
 * @ORM\HasLifecycleCallbacks
 */
class Vulnerability extends Base\Vulnerability implements HasIdColumn, RelatesToFiles
{
    /**
     * @ORM\ManyToMany(targetEntity="File", mappedBy="vulnerabilities")
     */
    protected $files;

    /**
     * Vulnerability constructor.
     */
    public function __construct()
    {
        parent::__construct();
        $this->files = new ArrayCollection();
    }

    /**
     * Override the parent method to set the $malwareAvailable property at the same time
     *
     * @param string $malware_description
     * @return Base\Vulnerability
     */
    public function setMalwareDescription($malware_description)
    {
        $this->setMalwareAvailable(!empty($malware_description));
        return parent::setMalwareDescription($malware_description);
    }

    /**
     * Override the parent method to set the $exploitAvailable property at the same time
     *
     * @param string $exploit_description
     * @return Base\Vulnerability
     */
    public function setExploitDescription($exploit_description)
    {
        $this->setExploitAvailable(!empty($exploit_description));
        return parent::setExploitDescription($exploit_description);
    }

    /**
     * Override parent method to format the date when an invalid date format is encountered
     *
     * @param \DateTime $published_date_from_scanner
     * @return Base\Vulnerability
     */
    public function setPublishedDateFromScanner($published_date_from_scanner)
    {
        if (empty($this->sanitiseDate($published_date_from_scanner))) {
            return $this;
        }

        return parent::setPublishedDateFromScanner(
            $this->sanitiseDate($published_date_from_scanner)
        );
    }

    /**
     * Override parent method to format the date when an invalid date format is encountered
     *
     * @param \DateTime $modified_date_from_scanner
     * @return Base\Vulnerability
     */
    public function setModifiedDateFromScanner($modified_date_from_scanner)
    {
        if (empty($this->sanitiseDate($modified_date_from_scanner))) {
            return $this;
        }

        return parent::setModifiedDateFromScanner(
            $this->sanitiseDate($modified_date_from_scanner)
        );
    }

    /**
     * Sanitise an incoming date string
     *
     * @param $dateString
     * @return Carbon|null
     */
    protected function sanitiseDate($dateString)
    {
        if ($dateString instanceof Carbon) {
            return $dateString;
        }

        $dateString = new Carbon(
            substr($dateString, 0, 15)
        );

        if (!($dateString instanceof Carbon)) {
            return null;
        }

        return $dateString;
    }

    /**
     * Get a hash value of all the property values for all the properties that are set
     *
     * @return string
     */
    public function getHash(): string
    {
        $properties = new Collection($this->toArray());

        return sha1($properties->reduce(function ($carry, $current)
        {
            return "$carry:$current";
        }));
    }

    /**
     * @param File $file
     * @return $this
     */
    public function addFile(File $file)
    {
        $this->files[] = $file;

        return $this;
    }

    /**
     * @param File $file
     * @return $this
     */
    public function removeFile(File $file)
    {
        $this->files->removeElement($file);

        return $this;
    }

    /**
     * Convenience method for getting the parent Asset entity
     *
     * @return Base\Asset
     */
    public function getParent()
    {
        return parent::getAsset();
    }

    /**
     * Convenience method for setting the parent Asset entity
     *
     * @param Base\Asset $asset
     * @return Base\Vulnerability
     */
    public function setParent(Base\Asset $asset)
    {
        return parent::setAsset($asset);
    }
}